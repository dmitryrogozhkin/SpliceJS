- Modules
  *scope -  is a context object passed as "this" in module definition function
  {definition:function(){
    var scope = this;
  }}


- Configuration
  Custom configuration could be loaded using a config module, which is just a module
  that calls configuration APIs within $js
      $js.setVar -  set environment variable, once variable is set it may not be modified
                      by another setVar() call during application's life.
      $js.setVersion



- Debug mode
  Debug mode is enabled by setting "sjs-debug" attribute to "true"
  on the main include script

  <script src="../../splicejs/splice.js"
          sjs-main="splice.test.components.js"
          sjs-start-mode="onload"
          sjs-version="mobile:*"
          sjs-debug="true"></script>


  When in debug mode, additional script api is added to the top level
  $module function's namespace:
    $js.list - lists entire import tree
    $js.configlist - lists configuration parameters


- Release mode
  When in release mode, the only global available to the user is a module definition function
  $module(object)
	- module function argument is a module definition object
		{	name:string
			prerequisite:[],
			imports:[],
			definition:[],

		} 

- Complete api list
  * Global context
    $js.module
    $js.start - starts application entry point module, available only when application 
		 start mode is set to manual, sis-start-mode=“manual”

  * Scope api
    scope.imports - property which is a collection of imports
    scope.exports - function defines module exports
    scope.add - adds an object to the scope

  * Module context
    
    $js.extension - extension may only be set once per application instance
    $js.context.resolve
    $js.context.absurl
    $js.load(resources) {
      - parameters
          resources:string[] - module or other resources paths
          all prerequisites are expected to be defined within the module
          being loaded
    }
    $js.log
    $js.setvar(varname, varvalue)
